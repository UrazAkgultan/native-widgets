name: Update Minimum MX Version

on:
  workflow_dispatch:
    inputs:
      package_paths:
        description: 'Select the packages to update (comma-separated)'
        required: true
        type: environment
        default: 'packages/jsActions/mobile-resources-native,packages/jsActions/nanoflow-actions-native'
      new_version:
        description: 'New minimumMXVersion value'
        required: true
        type: string

jobs:
  update-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
      - name: Update minimumMXVersion
        id: update-version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Initialize arrays to store results
          declare -a PR_URLS=()
          declare -a BRANCH_NAMES=()
          declare -a CURRENT_VERSIONS=()
          
          # Split package paths by comma and loop through each package
          IFS=',' read -ra PACKAGES <<< "${{ inputs.package_paths }}"
          for PACKAGE_PATH in "${PACKAGES[@]}"; do
            # Trim whitespace
            PACKAGE_PATH=$(echo "$PACKAGE_PATH" | xargs)
            echo "Processing package: $PACKAGE_PATH"
            
            # Read package.json file
            PACKAGE_JSON="$PACKAGE_PATH/package.json"
            CURRENT_VERSION=$(node -p "require('./$PACKAGE_JSON').marketplace.minimumMXVersion")
            
            # Convert current version to major.minor.x format (ignoring build number)
            CURRENT_VERSION_X=$(echo $CURRENT_VERSION | sed -E 's/^([0-9]+)\.([0-9]+)\.[0-9]+(\.[0-9]+)?/\1.\2.x/')
            
            # Create branch for minimumMXVersion update
            MIN_VERSION_BRANCH="update-min-version/${{ inputs.new_version }}-$(basename $PACKAGE_PATH)"
            git checkout -b $MIN_VERSION_BRANCH
            
            # Update package.json - only minimumMXVersion
            node -e "
              const fs = require('fs');
              const path = require('path');
              const packageJson = require('./$PACKAGE_JSON');
              
              packageJson.marketplace.minimumMXVersion = '${{ inputs.new_version }}';
              
              fs.writeFileSync(
                path.resolve('./$PACKAGE_JSON'),
                JSON.stringify(packageJson, null, 2)
              );
            "
            
            # Commit changes
            git add $PACKAGE_JSON
            git commit -m "chore: update minimumMXVersion to ${{ inputs.new_version }} in $PACKAGE_PATH"
            
            # Push branch
            git push origin $MIN_VERSION_BRANCH
            
            # Create PR for minimumMXVersion update and capture the URL
            PR_URL=$(gh pr create \
              --title "chore: update minimumMXVersion to ${{ inputs.new_version }} in $PACKAGE_PATH" \
              --body "This PR updates the minimumMXVersion to ${{ inputs.new_version }} in $PACKAGE_PATH" \
              --base main \
              --head $MIN_VERSION_BRANCH \
              --json url \
              --jq .url)
            
            # Store results
            PR_URLS+=("$PR_URL")
            CURRENT_VERSIONS+=("$CURRENT_VERSION")
            
            # Switch back to main branch for creating the second branch
            git checkout main
            git pull origin main
            
            # Create new branch for branchName update from main
            BRANCH_NAME="version/$CURRENT_VERSION_X-$(basename $PACKAGE_PATH)"
            git checkout -b $BRANCH_NAME
            
            # Update package.json in new branch - only branchName
            node -e "
              const fs = require('fs');
              const path = require('path');
              const packageJson = require('./$PACKAGE_JSON');
              
              packageJson.testProject.branchName = 'mx/$CURRENT_VERSION_X';
              
              fs.writeFileSync(
                path.resolve('./$PACKAGE_JSON'),
                JSON.stringify(packageJson, null, 2)
              );
            "
            
            # Commit changes in new branch
            git add $PACKAGE_JSON
            git commit -m "chore: update branchName to mx/$CURRENT_VERSION_X in $PACKAGE_PATH"
            
            # Push new branch
            git push origin $BRANCH_NAME
            
            # Store branch name
            BRANCH_NAMES+=("$BRANCH_NAME")
          done
          
          # Set outputs for other steps
          echo "current_versions=${CURRENT_VERSIONS[*]}" >> $GITHUB_OUTPUT
          echo "pr_urls=${PR_URLS[*]}" >> $GITHUB_OUTPUT
          echo "branch_names=${BRANCH_NAMES[*]}" >> $GITHUB_OUTPUT
      
      - name: Send Slack notifications
        uses: ./.github/actions/slack-notification
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          message: |
            ðŸš€ *Minimum MX Version Update*
            
            *Packages:* ${{ inputs.package_paths }}
            *Current Versions:* ${{ steps.update-version.outputs.current_versions }}
            *New Version:* ${{ inputs.new_version }}
            *PRs:* 
            ${{ steps.update-version.outputs.pr_urls }}
            *Branches:* 
            ${{ steps.update-version.outputs.branch_names }}
          bot-token: ${{ secrets.SLACK_BOT_TOKEN }}